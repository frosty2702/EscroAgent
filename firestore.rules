rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidAddress(address) {
      return address is string && 
             address.matches('^0x[a-fA-F0-9]{40}$');
    }
    
    function isValidAmount(amount) {
      return amount is number && 
             amount > 0 && 
             amount <= 1000; // Max 1000 ETH for security
    }
    
    function isValidConditionType(type) {
      return type is int && 
             type >= 0 && 
             type <= 4;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp &&
             timestamp > timestamp.date(2024, 1, 1) &&
             timestamp < timestamp.date(2030, 1, 1);
    }
    
    function isValidString(str, minLen, maxLen) {
      return str is string && 
             str.size() >= minLen && 
             str.size() <= maxLen &&
             !str.matches('.*[<>].*'); // Prevent XSS
    }
    
    function isValidUrl(url) {
      return url is string &&
             (url.matches('^https://.*') || url.matches('^http://.*')) &&
             !url.matches('.*localhost.*') &&
             !url.matches('.*127\\.0\\.0\\.1.*') &&
             !url.matches('.*192\\.168\\..*') &&
             !url.matches('.*10\\..*');
    }
    
    function isAuthorizedAgent() {
      // Replace with your actual agent service account email
      return request.auth.token.email == 'trustflow-agent@your-project.iam.gserviceaccount.com';
    }
    
    function isEscrowParticipant(escrowData) {
      return request.auth.token.address == escrowData.payerAddress ||
             request.auth.token.address == escrowData.payeeAddress;
    }
    
    // Escrow agreements collection
    match /agreements/{agreementId} {
      
      // Read access: Only participants and authorized agent
      allow read: if isAuthenticated() && 
                     (isEscrowParticipant(resource.data) || isAuthorizedAgent());
      
      // Create access: Only authenticated users for their own agreements
      allow create: if isAuthenticated() && 
                       isValidAgreementData(request.resource.data) &&
                       request.auth.token.address == request.resource.data.payerAddress;
      
      // Update access: Only participants for status updates, or agent for settlement
      allow update: if isAuthenticated() && 
                       (isEscrowParticipant(resource.data) || isAuthorizedAgent()) &&
                       isValidAgreementUpdate(request.resource.data, resource.data);
      
      // Delete access: Only the payer before the agreement is funded
      allow delete: if isAuthenticated() && 
                       request.auth.token.address == resource.data.payerAddress &&
                       resource.data.status == 'pending';
    }
    
    // Public statistics (read-only)
    match /public/stats {
      allow read: if true; // Public read access
      allow write: if isAuthorizedAgent(); // Only agent can update stats
    }
    
    // Agent logs (agent-only access)
    match /agent_logs/{logId} {
      allow read, write: if isAuthorizedAgent();
    }
    
    // Validation function for agreement data
    function isValidAgreementData(data) {
      return data.keys().hasAll(['payerAddress', 'payeeAddress', 'amount', 'conditionType', 'createdAt', 'status']) &&
             isValidAddress(data.payerAddress) &&
             isValidAddress(data.payeeAddress) &&
             data.payerAddress != data.payeeAddress &&
             isValidAmount(data.amount) &&
             isValidConditionType(data.conditionType) &&
             isValidTimestamp(data.createdAt) &&
             data.status in ['pending', 'funded', 'settled', 'disputed'] &&
             isValidConditionData(data);
    }
    
    // Validation for condition-specific data
    function isValidConditionData(data) {
      return (data.conditionType == 0 && validateDateCondition(data)) ||
             (data.conditionType == 1 && validateTaskCondition(data)) ||
             (data.conditionType == 2 && validateGithubCondition(data)) ||
             (data.conditionType == 3 && validateApiCondition(data)) ||
             (data.conditionType == 4 && validateCustomCondition(data));
    }
    
    function validateDateCondition(data) {
      return data.get('settlementDate', null) == null || 
             isValidTimestamp(data.settlementDate);
    }
    
    function validateTaskCondition(data) {
      return data.get('taskName', null) == null || 
             isValidString(data.taskName, 3, 200);
    }
    
    function validateGithubCondition(data) {
      return data.get('githubPrUrl', null) == null || 
             (isValidUrl(data.githubPrUrl) && 
              data.githubPrUrl.matches('.*github\\.com.*'));
    }
    
    function validateApiCondition(data) {
      return (data.get('apiEndpoint', null) == null || isValidUrl(data.apiEndpoint)) &&
             (data.get('expectedValue', null) == null || isValidString(data.expectedValue, 1, 500));
    }
    
    function validateCustomCondition(data) {
      return data.get('customEventName', null) == null || 
             isValidString(data.customEventName, 3, 100);
    }
    
    // Validation for agreement updates
    function isValidAgreementUpdate(newData, oldData) {
      // Prevent modification of critical fields after creation
      return newData.payerAddress == oldData.payerAddress &&
             newData.payeeAddress == oldData.payeeAddress &&
             newData.amount == oldData.amount &&
             newData.conditionType == oldData.conditionType &&
             newData.createdAt == oldData.createdAt &&
             isValidStatusTransition(newData.status, oldData.status) &&
             isValidUpdateFields(newData, oldData);
    }
    
    // Valid status transitions
    function isValidStatusTransition(newStatus, oldStatus) {
      return (oldStatus == 'pending' && newStatus in ['funded', 'disputed']) ||
             (oldStatus == 'funded' && newStatus in ['settled', 'disputed']) ||
             (oldStatus == oldStatus); // No change
    }
    
    // Validate specific update fields
    function isValidUpdateFields(newData, oldData) {
      // Allow updating condition flags (for demo purposes)
      return (!newData.diff(oldData).affectedKeys().hasAny(['conditionMet', 'taskCompleted', 'prMerged', 'apiConditionMet', 'customEventTriggered', 'status', 'settledAt', 'settlementTx'])) ||
             isAuthorizedAgent(); // Agent can update settlement fields
    }
  }
} 